language: cpp
strict: true

objective: >
  Given a C++ source file with a .cc extension from a Drogon-based REST API project (such as orgChartAPI), perform the following:
  1. Identify all controller classes, public methods, and business logic functions.
  2. For each controller and handler, generate comprehensive Google Test unit tests that:
     - Cover all REST endpoints (GET, POST, PUT, DELETE) and their possible code paths.
     - Include tests for valid, invalid, and edge-case inputs.
     - Mock all external dependencies, including database access (e.g., DAOs), JWT authentication, and Drogon plugins/filters.
     - Validate correct HTTP status codes, response payloads, and error handling.
  3. Ensure all tests use Google Test best practices, proper test fixtures, and clear, descriptive test names.
  4. Do not generate duplicate or trivial tests; focus on meaningful coverage.
  5. Ensure all necessary includes and mocks are present, and that the test files are compatible with CMake and the orgChartAPI build system.
  6. Output test files in the format `test_<original_filename>.cc`, including `#include "<original_filename>.hpp"` and all required Google Test and mock headers.

cpp:
  framework: googletest
  details:
    - Use `gtest/gtest.h` for all unit tests.
    - Use Google Mock (`gmock/gmock.h`) to mock dependencies (database, JWT, Drogon plugins).
    - For each controller, create a test fixture class if needed.
    - Cover all public methods, especially REST endpoint handlers.
    - For each test, clearly state the scenario (e.g., "Valid input", "Missing JWT", "Database error").
    - Ensure tests are isolated and do not require a running server or real database.
    - Do not include a `main()` function in the source file if generating tests.
    - Generate `test_<original_filename>.cc` using `#include "<original_filename>.hpp"` and all necessary mocks.

build_fixes:
  if_fails:
    - Use build logs to detect:
        - missing includes
        - linkage/type issues
        - missing mocks or dependencies
    - Fix includes, add missing mocks, and resolve build errors.
    - Rebuild and retry test generation after fixing.

  if_passes:
    - Run `gcov` or `lcov` to collect test coverage.
    - Send uncovered lines/functions back to LLM.
    - Ask the LLM to refine the test file for higher coverage and eliminate redundant tests.

output:
  cpp:
    generate:
      - <original_filename>.hpp
      - <original_filename>.cc
      - test_<original_filename>.cc


# language: cpp
# strict: true

# objective: >
#   Given a C++ source file with a .cc extension from a Drogon-based REST API project (such as orgChartAPI), perform the following:
#   1. Identify all controller classes, public methods, and business logic functions.
#   2. For each controller and handler, generate comprehensive Google Test unit tests that:
#      - Cover all REST endpoints (GET, POST, PUT, DELETE) and their possible code paths.
#      - Include tests for valid, invalid, and edge-case inputs.
#      - Mock all external dependencies, including database access (e.g., DAOs), JWT authentication, and Drogon plugins/filters.
#      - Validate correct HTTP status codes, response payloads, and error handling.
#   3. Ensure all tests use Google Test best practices, proper test fixtures, and clear, descriptive test names.
#   4. Do not generate duplicate or trivial tests; focus on meaningful coverage.
#   5. Ensure all necessary includes and mocks are present, and that the test files are compatible with CMake and the orgChartAPI build system.
#   6. Output test files in the format `test_<original_filename>.cc`, including `#include "<original_filename>.hpp"` and all required Google Test and mock headers.

# cpp:
#   framework: googletest
#   details:
#     - Use `gtest/gtest.h` for all unit tests.
#     - Use Google Mock (`gmock/gmock.h`) to mock dependencies (database, JWT, Drogon plugins).
#     - For each controller, create a test fixture class if needed.
#     - Cover all public methods, especially REST endpoint handlers.
#     - For each test, clearly state the scenario (e.g., "Valid input", "Missing JWT", "Database error").
#     - Ensure tests are isolated and do not require a running server or real database.
#     - Do not include a `main()` function in the source file if generating tests.
#     - Generate `test_<original_filename>.cc` using `#include "<original_filename>.hpp"` and all necessary mocks.

# build_fixes:
#   if_fails:
#     - Use build logs to detect:
#         - missing includes
#         - linkage/type issues
#         - missing mocks or dependencies
#     - Fix includes, add missing mocks, and resolve build errors.
#     - Rebuild and retry test generation after fixing.

#   if_passes:
#     - Run `gcov` or `lcov` to collect test coverage.
#     - Send uncovered lines/functions back to LLM.
#     - Ask the LLM to refine the test file for higher coverage and eliminate redundant tests.

# output:
#   cpp:
#     generate:
#       - <original_filename>.hpp
#       - <original_filename>.cc
      # - test_<original_filename>.cc

# language: auto  # auto-detect "c" or "cpp"
# strict: true

# objective: >
#   Given a C or C++ source file, perform the following:
#   1. Extract all public functions/classes and place them into a proper .h/.hpp header file.
#   2. Modify the source file to remove `main()` if present, and ensure function definitions remain valid.
#   3. Generate a corresponding unit test file (using assert.h or GoogleTest).
#   4. Ensure tests include the generated header file, not the source file directly.

# c:
#   framework: unity
#   details:
#     - Use the Unity framework for all C tests (https://github.com/ThrowTheSwitch/Unity).
#     - Create `<original_filename>.h` containing function prototypes.
#     - Modify `<original_filename>.c` to include only function definitions (remove main if needed).
#     - Generate `test_<original_filename>.c` using `#include "unity/unity.h"` and `#include "<original_filename>.h"`.
#     - Every test file must define `setUp` and `tearDown` (even if empty), use only `TEST_ASSERT_*` macros (not assert), and register all tests with `RUN_TEST` in a single `main()` function.

# cpp:
#   framework: googletest
#   details:
#     - Use `gtest/gtest.h` for unit testing.
#     - Create `<original_filename>.hpp` with all public class/method declarations.
#     - Modify `<original_filename>.cpp` to only contain method definitions.
#     - Do not include `main()` in the source if generating tests.
#     - Generate `test_<original_filename>.cpp` using `#include "<original_filename>.hpp"`.

# build_fixes:
#   if_fails:
#     - Use build logs to detect:
#         - missing includes
#         - multiple definitions of main
#         - linkage/type issues
#     - Fix includes, convert inline implementations to external, add missing headers.
#     - Rebuild and retry test generation after fixing.

#   if_passes:
#     - Run `gcov` or `lcov` to collect test coverage.
#     - Send uncovered lines/functions back to LLM.
#     - Ask the LLM to refine the test file for higher coverage.
#     - Eliminate any redundant or duplicate tests.

# output:
#   c:
#     generate:
#       - <original_filename>.h
#       - <original_filename>.c
#       - test_<original_filename>.c
#   cpp:
#     generate:
#       - <original_filename>.hpp
#       - <original_filename>.cpp
#       - test_<original_filename>.cpp
